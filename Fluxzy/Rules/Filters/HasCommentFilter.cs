// // Copyright 2022 - Haga Rakotoharivelo
// 

using System;
using System.Collections.Generic;
using System.Linq;

namespace Fluxzy.Rules.Filters
{
    public class HasCommentFilter : Filter
    {
        protected override bool InternalApply(IAuthority? authority, IExchange? exchange, IFilteringContext? filteringContext)
        {
            return !string.IsNullOrWhiteSpace(exchange?.Comment);
        }

        public override FilterScope FilterScope => FilterScope.OutOfScope;

        public override string AutoGeneratedName { get; } = "Has any comment" ;

        public override bool PreMadeFilter { get; } = true; 
    }


    public class HasTagFilter : Filter
    {
        protected override bool InternalApply(IAuthority? authority, IExchange? exchange, IFilteringContext? filteringContext)
        {
            return exchange?.Tags?.Any() ?? false;
        }

        public override FilterScope FilterScope => FilterScope.OutOfScope;

        public override string AutoGeneratedName { get; } = "Has any tag";

        public override bool PreMadeFilter { get; } = true;
    }

    public class CommentSearchFilter : StringFilter
    {
        public CommentSearchFilter(string pattern)
            : base(pattern, StringSelectorOperation.Contains)
        {

        }

        public override FilterScope FilterScope => FilterScope.OutOfScope;

        protected override IEnumerable<string> GetMatchInputs(IAuthority authority, IExchange? exchange)
        {
            if (exchange != null) {
                yield return exchange.Comment ?? string.Empty; 
            }
        }

        public override string AutoGeneratedName { get; } = "Search in comment";

        public override bool PreMadeFilter { get; } = true;
    }

    public class TagContainsFilter : Filter
    {

        public TagContainsFilter(Tag?  tag)
        {
            Tag = tag;
        }

        public Tag? Tag { get; }
        

        protected override bool InternalApply(IAuthority? authority, IExchange? exchange, IFilteringContext? filteringContext)
        {
            if (exchange?.Tags == null || Tag == null)
                return false;

            return exchange.Tags.Contains(Tag); 
        }

        public override FilterScope FilterScope => FilterScope.OutOfScope;

        public override string AutoGeneratedName => $"Tag contains {Tag?.Value}";
    }


}