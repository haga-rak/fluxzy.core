// Copyright © 2022 Haga Rakotoharivelo

using System;
using Fluxzy.Misc.Converters;

namespace Fluxzy.Rules.Filters
{
    public abstract class Filter : PolymorphicObject
    {
        public virtual Guid Identifier { get; init; } = Guid.NewGuid();

        public bool Inverted { get; set; }

        public abstract FilterScope FilterScope { get; }

        public int ScopeId => (int)FilterScope;

        public virtual string AutoGeneratedName { get; } = "Filter";

        public virtual bool PreMadeFilter { get; } = false;

        public bool Locked { get; set; }

        public virtual string? ShortName { get; } = "custom";

        public virtual string? Description { get; set; }

        public string FriendlyName
        {
            get
            {
                var initialName = !string.IsNullOrWhiteSpace(Description) ? Description : AutoGeneratedName;

                if (Inverted)
                    initialName = $"NOT {initialName}";

                return initialName;
            }
        }

        public string Category
        {
            get
            {
                var typeFullName = GetType().FullName;

                if (typeFullName.Contains("RequestFilters"))
                    return "Request";

                if (typeFullName.Contains("ResponseFilters"))
                    return "Response";

                return "Global";
            }
        }

        public virtual bool Common { get; set; } = false;

        protected abstract bool InternalApply(IAuthority authority, IExchange? exchange,
            IFilteringContext? filteringContext);

        public virtual bool Apply(IAuthority authority, IExchange? exchange, IFilteringContext? filteringContext)
        {
            var internalApplyResult = InternalApply(authority, exchange, filteringContext);

            return !Inverted ? internalApplyResult : !internalApplyResult;
        }
    }
}
