// Copyright © 2022 Haga Rakotoharivelo

using Fluxzy.Misc.Converters;
using System;

namespace Fluxzy.Rules.Filters
{
    public abstract class Filter : PolymorphicObject
    {
        public virtual Guid Identifier { get;  } = Guid.NewGuid();

        public bool Inverted { get; set; }

        protected abstract bool InternalApply(IAuthority authority, IExchange exchange);

        public abstract FilterScope FilterScope { get; }

        public virtual string AutoGeneratedName { get; } = "Filter" ;

        public abstract string GenericName { get; }

        public virtual bool PreMadeFilter { get; } = false;
        
        public virtual bool Apply(IAuthority authority, IExchange exchange)
        {
            var internalApplyResult = InternalApply(authority, exchange);

            return !Inverted ? internalApplyResult : !internalApplyResult;
        }

        public bool Locked { get; set; }

        public virtual string ShortName { get; } = "custom";

        public virtual string? Description { get; set; }
        

        public string FriendlyName => Description ?? AutoGeneratedName;
    }
}