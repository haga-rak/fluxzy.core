// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Fluxzy.Rules;
using Fluxzy.Rules.Filters;
using Xunit;

namespace Fluxzy.Tests.UnitTests.Rules
{
    public class DefaultFilterSettings
    {
        public static IEnumerable<object[]> GetFilterTypes()
        {
            return typeof(Filter).Assembly
                          .GetTypes()
                          .Where(t => t.IsSubclassOf(typeof(Filter)))
                          .Where(t => !t.IsAbstract)
                          .Where(t => t.GetCustomAttribute<FilterMetaDataAttribute>() is { NotSelectable: false })
                          // having a default constructor is a requirement
                          .Where(t => t.GetConstructor(Type.EmptyTypes) != null)
                          .Select(s => new object [] { s.FullName! })
                          .ToList();
        }

        [Theory]
        [MemberData(nameof(GetFilterTypes))]
        public void ValidateProperties(string filterName)
        {
            var type = typeof(Filter).Assembly.GetType(filterName);
            var filter = (Filter) Activator.CreateInstance(type!)!;

            Assert.NotNull(filter.Common);
            Assert.NotNull(filter.GenericName);
            Assert.NotNull(filter.PreMadeFilter);
            Assert.NotNull(filter.FilterScope);

            Assert.NotNull(filter.AutoGeneratedName);
            Assert.NotNull(filter.Category);
            Assert.NotNull(filter.ShortName);
            Assert.NotNull(filter.GenericName);
        }

        [Theory]
        [MemberData(nameof(GetFilterTypes))]
        public void ValidateExamples(string filterName)
        {
            var type = typeof(Filter).Assembly.GetType(filterName);
            var filter = (Filter) Activator.CreateInstance(type!)!;

            var examples = filter.GetExamples()?.ToList();

            Assert.NotNull(examples);

            foreach (var example in examples!) {
                Assert.NotNull(example.Description);
                Assert.NotNull(example.Filter);
            }
        }
    }
}
