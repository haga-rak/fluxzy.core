// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System.Collections.Generic;
using Fluxzy.Core;
using Fluxzy.Misc;

namespace Fluxzy.Rules.Filters
{
    [FilterMetaData(
        LongDescription = "Select exchange with ids. `-` is used to define a range. `,` is used to separate values"
    )]
    public class IdLookupFilter : Filter
    {
        private HashSet<int> _ids = new HashSet<int>();
        
        public override FilterScope FilterScope => FilterScope.OnAuthorityReceived;

        public override string GenericName => "Filter by id";

        public override string AutoGeneratedName { get; } = "Id Filter";

        public override string ShortName => "id";

        public string Pattern { get; set; } = string.Empty;

        public override void Init(StartupContext startupContext)
        {
            base.Init(startupContext);

            if (string.IsNullOrWhiteSpace(Pattern))
                return;

            _ids = IdLookupHelper.ParsePattern(Pattern);
        }

        protected override bool InternalApply(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange, IFilteringContext? filteringContext)
        {
            return _ids.Contains(exchange?.Id ?? -1);
        }

        public override IEnumerable<FilterExample> GetExamples()
        {
            yield return new FilterExample("Select exchanges with id 5", new IdLookupFilter() {
                Pattern = "5"
            });

            yield return new FilterExample("Select exchanges with from 2 to 5", new IdLookupFilter() {
                Pattern = "2-5"
            });

            yield return new FilterExample("Select exchanges with ids 3,4,9", new IdLookupFilter() {
                Pattern = "3,4,9"
            });
        }
    }
}
