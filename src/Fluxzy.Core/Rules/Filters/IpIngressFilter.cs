// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System.Collections.Generic;
using System.Text.Json.Serialization;
using Fluxzy.Core;

namespace Fluxzy.Rules.Filters
{
    /// <summary>
    ///     Select exchanges according to client ip address
    /// </summary>
    [FilterMetaData(
        LongDescription = "Select exchanges according to client ip address. Full IP notation is used from IPv6."
    )]
    public class IpIngressFilter : StringFilter
    {
        public IpIngressFilter()
            : base(string.Empty)
        {
        }

        public IpIngressFilter(string pattern)
            : base(pattern)
        {
        }

        [JsonConstructor]
        public IpIngressFilter(string pattern, StringSelectorOperation operation)
            : base(pattern, operation)
        {

        }

        public override FilterScope FilterScope => FilterScope.OnAuthorityReceived;

        public override string GenericName => "Filter by Ingress IP Address";

        public override string AutoGeneratedName => $"IP in : `{Pattern}`";

        public override string ShortName => "ip in";

        public override IEnumerable<FilterExample> GetExamples()
        {
            yield return new FilterExample(
                "Retains only exchanges coming from IP 192.168.1.1",
                new IpIngressFilter("192.168.1.1", StringSelectorOperation.EndsWith));
        }

        protected override IEnumerable<string> GetMatchInputs(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange)
        {
            if (exchange is Exchange rawExchange) {
                yield return rawExchange.Metrics.DownStreamClientAddress;
                yield break; 
            }

            if (exchange is ExchangeInfo exchangeInfo) {
                yield return exchangeInfo.Metrics.DownStreamClientAddress;
                yield break;
            }
        }
    }
}
