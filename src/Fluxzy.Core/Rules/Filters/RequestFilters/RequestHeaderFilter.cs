// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json.Serialization;
using Fluxzy.Core;

namespace Fluxzy.Rules.Filters.RequestFilters
{
    /// <summary>
    ///     Select exchanges according to request header values.
    /// </summary>
    [FilterMetaData(
        LongDescription = "Select exchanges according to request header values."
    )]
    public class RequestHeaderFilter : HeaderFilter
    {
        public RequestHeaderFilter(string pattern, string headerName)
            : base(pattern, headerName)
        {
        }

        [JsonConstructor]
        public RequestHeaderFilter(string pattern, StringSelectorOperation operation, string headerName)
            : base(pattern, operation, headerName)
        {
        }

        public override FilterScope FilterScope => FilterScope.RequestHeaderReceivedFromClient;

        public override string ShortName => "req head.";

        public override string GenericName => "Filter by request header";

        public override string AutoGeneratedName => $"Request header `{Pattern}`";

        public override IEnumerable<FilterExample> GetExamples()
        {
            yield return new FilterExample("Select exchanges having request header `dnt: 1`",
                new RequestHeaderFilter("1", StringSelectorOperation.Exact, "dnt"));

            yield return new FilterExample("Select exchanges issued by Chrome 112 by checking User-Agent",
                new RequestHeaderFilter("Chrome/112 ", StringSelectorOperation.Contains, "User-Agent"));
        }

        protected override IEnumerable<string> GetMatchInputs(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange)
        {
            return exchange?.GetRequestHeaders().Where(e =>
                               e.Name.Span.Equals(HeaderName.AsSpan(), StringComparison.InvariantCultureIgnoreCase))
                           .Select(s => s.Value.ToString()) ?? Array.Empty<string>();
        }
    }
}
