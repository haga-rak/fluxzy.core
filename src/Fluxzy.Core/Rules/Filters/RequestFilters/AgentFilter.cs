// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System.Collections.Generic;
using Fluxzy.Core;

namespace Fluxzy.Rules.Filters.RequestFilters
{
    /// <summary>
    ///     Filter by agent
    /// </summary>
    [FilterMetaData(
        LongDescription = "Select exchanges according to configured source agent (user agent or process).",
        NotSelectable = true
    )]
    public class AgentFilter : Filter
    {
        public AgentFilter(Agent? agent)
        {
            Agent = agent;
        }

        [FilterDistinctive]
        public Agent? Agent { get; set; }

        public override FilterScope FilterScope { get; } = FilterScope.RequestHeaderReceivedFromClient;

        public override string GenericName => "Agent filter";

        public override string AutoGeneratedName => $"Source agent : `{Agent?.FriendlyName}`";

        public override string ShortName => "agent";

        public override bool PreMadeFilter => false;

        protected override bool InternalApply(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange,
            IFilteringContext? filteringContext)
        {
            if (exchange?.Agent == null || Agent == null)
                return false;

            return exchange.Agent.Id == Agent.Id;
        }

        public override IEnumerable<FilterExample> GetExamples()
        {
            // View filter does not include examples
            yield break;
        }
    }
}
