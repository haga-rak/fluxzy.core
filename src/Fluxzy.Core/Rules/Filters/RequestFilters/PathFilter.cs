// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Fluxzy.Core;
using Fluxzy.Rules.Extensions;

namespace Fluxzy.Rules.Filters.RequestFilters
{
    /// <summary>
    ///     Select exchanges according to url path. Path includes query string if any.
    /// </summary>
    [FilterMetaData(
        LongDescription = "Select exchanges according to url path. Path includes query string if any. Path must start with `/`"
    )]
    public class PathFilter : StringFilter
    {
        public PathFilter(string pattern)
            : base(pattern)
        {
        }

        [JsonConstructor]
        public PathFilter(string pattern, StringSelectorOperation operation)
            : base(pattern, operation)
        {
        }

        public override FilterScope FilterScope => FilterScope.RequestHeaderReceivedFromClient;

        public override string AutoGeneratedName => $"Path `{Pattern}`";

        public override string GenericName => "Filter by url path";

        public override IEnumerable<FilterExample> GetExamples()
        {
            yield return new FilterExample(
                "Retains only exchanges having uri starting with API",
                new PathFilter("/api", StringSelectorOperation.StartsWith));
        }

        protected override IEnumerable<string> GetMatchInputs(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange)
        {
            if (exchange != null) {

                if (authority.Secure || !Uri.TryCreate(exchange.Path, UriKind.Absolute, out var uri))
                {
                    yield return exchange.Path;
                    yield break;
                }
                
                yield return uri.PathAndQuery;
            }
        }
    }

    public static class PathFilterExtensions
    {
        /// <summary>
        /// Sets a filter for configuring actions based on the request path matching a specified pattern.
        /// </summary>
        /// <param name="filterBuilder">The filter builder.</param>
        /// <param name="pattern">The pattern to be matched.</param>
        /// <param name="operation">The string selector operation. The default value is StringSelectorOperation.StartsWith.</param>
        /// <returns>The configure action builder.</returns>
        public static IConfigureActionBuilder WhenPathMatch(
            this IConfigureFilterBuilder filterBuilder, string pattern,
            StringSelectorOperation operation = StringSelectorOperation.StartsWith)
            => filterBuilder.When(new PathFilter(pattern, operation));
    }
}
