// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System.Collections.Generic;
using System.Text.Json.Serialization;
using Fluxzy.Core;
using Fluxzy.Rules.Extensions;

namespace Fluxzy.Rules.Filters.RequestFilters
{
    /// <summary>
    ///     Filter according to full url (includes path and query)
    /// </summary>
    [FilterMetaData(
        LongDescription =
            "Select exchanges according to URI (scheme, FQDN, path and query). Supports common string search option and regular expression.",
        QuickReachFilter = true,
        QuickReachFilterOrder = 0
    )]
    public class AbsoluteUriFilter : StringFilter
    {
        public AbsoluteUriFilter(string pattern)
            : base(pattern)
        {
        }

        [JsonConstructor]
        public AbsoluteUriFilter(string pattern, StringSelectorOperation operation)
            : base(pattern, operation)
        {
        }

        public override FilterScope FilterScope => FilterScope.RequestHeaderReceivedFromClient;

        public override string AutoGeneratedName => $"Full url `{Pattern}`";

        public override string ShortName => "url";

        public override bool Common { get; set; } = true;

        protected override IEnumerable<string> GetMatchInputs(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange)
        {
            if (exchange != null)
                yield return exchange.FullUrl;
        }

        public override IEnumerable<FilterExample> GetExamples()
        {
            yield return new FilterExample(
                "Select only exchanges with the URL matching exactly `https://www.fluxzy.io/some-path`",
                new AbsoluteUriFilter(@"https://www.fluxzy.io/some-path", StringSelectorOperation.Exact));

            yield return new FilterExample(
                "Match all HTTPS exchanges by checking URL scheme with a regular expression",
                new AbsoluteUriFilter(@"^https\:\/\/", StringSelectorOperation.Regex));
        }
    }

    public static class AbsoluteUriFilterExtensions
    {
        /// <summary>
        /// Chain an AbsoluteUriFilter to a ConfigureFilterBuilder
        /// </summary>
        /// <param name="filterBuilder"></param>
        /// <param name="pattern"></param>
        /// <param name="operation"></param>
        /// <returns></returns>
        public static IConfigureActionBuilder WhenUriMatch(this IConfigureFilterBuilder filterBuilder,
            string pattern, StringSelectorOperation operation = StringSelectorOperation.Exact)
        {
            return new ConfigureActionBuilder(filterBuilder.FluxzySetting,
                new AbsoluteUriFilter(pattern, operation));
        }
    }
}
