// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System;
using System.Text;
using Fluxzy.Rules.Filters;
using static System.Collections.Specialized.BitVector32;

namespace Fluxzy.Rules
{
    public class RuleExecutionFailureException : Exception
    {
        public RuleExecutionFailureException(string message, Exception ex)
            : base(message, ex)
        {
        }

        public RuleExecutionFailureException(string message, Filter filter)
            : base(FormatMessage(message, filter, null))
        {
        }

        public RuleExecutionFailureException(string message, Action action)
            : base(FormatMessage(message, action, null))
        {
        }

        public RuleExecutionFailureException(string message, Filter filter, Exception innerException)
            : base(FormatMessage(message, filter, innerException))
        {
        }

        public RuleExecutionFailureException(string message, Action action, Exception innerException)
            : base(FormatMessage(message, action, innerException))
        {
        }

        private static string FormatMessage(string originalMessage, Filter filter, Exception? exception)
        {
            var builder = new StringBuilder(originalMessage);

            builder.AppendLine();
            builder.AppendLine();
            builder.AppendLine($"Origin: [{filter.GetType().Name}] “{filter.AutoGeneratedName}” " +
                               $"(Friendly Name: {filter.FriendlyName}) ({filter.Identifier})");

            if (exception != null)
            {
                builder.AppendLine();
                builder.AppendLine("Exception:");
                builder.AppendLine(exception.ToString());
            }

            return builder.ToString();
        }

        private static string FormatMessage(string originalMessage, Action action, Exception? exception)
        {
            var builder = new StringBuilder(originalMessage);

            builder.AppendLine();
            builder.AppendLine();
            builder.AppendLine($"Origin: [{action.GetType().Name}] “{action.DefaultDescription}” " +
                               $"(Friendly Name: {action.FriendlyName}) ({action.Identifier})");

            if (exception != null)
            {
                builder.AppendLine();
                builder.AppendLine("Exception:");
                builder.AppendLine(exception.ToString());
            }

            return builder.ToString();
        }
    }
}
