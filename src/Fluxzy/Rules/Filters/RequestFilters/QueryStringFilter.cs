// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System;
using System.Collections.Generic;
using System.Linq;
using Fluxzy.Core;
using Fluxzy.Formatters.Producers.Requests;

namespace Fluxzy.Rules.Filters.RequestFilters
{
    [FilterMetaData(
        LongDescription =
            "Select exchanges containing a specific query string. " +
            "If `name` is not defined or empty, the search will be performed on any query string values." +
            "The search will pass if at least one value match."
    )]
    public class QueryStringFilter : StringFilter
    {
        public QueryStringFilter(string? name, string pattern)
            : base(pattern, StringSelectorOperation.Exact)
        {
            Name = name;
        }

        [FilterDistinctive(Description = "The query string name")]
        public string? Name { get; set;  }

        public override FilterScope FilterScope => FilterScope.RequestHeaderReceivedFromClient;
        
        public override string? ShortName => "qry str.";

        public override string AutoGeneratedName => $"Query string {Name}=`{Pattern}`";

        public override string GenericName => "Query string filter";

        public override bool Common { get; set; } = true;

        protected override IEnumerable<string> GetMatchInputs(ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange)
        {
            var url = exchange?.FullUrl;

            if (url == null) {
                yield break;
            }

            if (!HttpHelper.TryGetQueryStrings(url, out var queryStringItems)) {
                yield break;
            }

            var usedName = Name.EvaluateVariable(exchangeContext);

            var matchingValues = string.IsNullOrEmpty(usedName) ? queryStringItems.Select(s => s.Value)
                : queryStringItems.Where(s => s.Name.Equals(usedName, StringComparison.InvariantCultureIgnoreCase))
                    .Select(s => s.Value);

            foreach (var value in matchingValues) {
                yield return value;
            }
        }

        public override IEnumerable<FilterExample> GetExamples()
        {
            yield return new("Select exchanges having query string `id=123456`",
                               new QueryStringFilter("id", "123456") {
                                   Operation = StringSelectorOperation.Exact
                               });
        }
    }
}
