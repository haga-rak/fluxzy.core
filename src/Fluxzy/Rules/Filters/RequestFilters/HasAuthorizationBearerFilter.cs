// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System;
using System.Collections.Generic;
using System.Linq;
using Fluxzy.Clients;
using Fluxzy.Extensions;

namespace Fluxzy.Rules.Filters.RequestFilters
{
    [FilterMetaData(
        LongDescription = "Select exchanges having bearer token in authorization."
    )]
    public class HasAuthorizationBearerFilter : Filter
    {
        public override FilterScope FilterScope => FilterScope.RequestHeaderReceivedFromClient;

        public override string AutoGeneratedName => "Has bearer Token (authorization)";

        public override string ShortName => "bear.";

        public override bool PreMadeFilter => true;

        protected override bool InternalApply(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange,
            IFilteringContext? filteringContext)
        {
            if (exchange == null)
                return false;

            var candidates = exchange.GetRequestHeaders().Find("Authorization").ToList();

            return candidates.Any(c => c.Value.Span.StartsWith("bearer", StringComparison.InvariantCultureIgnoreCase));
        }

        public override IEnumerable<FilterExample> GetExamples()
        {
            var defaultSample = GetDefaultSample();

            if (defaultSample != null)
                yield return defaultSample;
        }
    }
}
