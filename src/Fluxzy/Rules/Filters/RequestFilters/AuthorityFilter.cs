// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Fluxzy.Rules.Filters.RequestFilters
{
    [FilterMetaData(
        LongDescription =
            "Select exchange according to hostname and a port"
    )]
    public class AuthorityFilter : StringFilter
    {
        [JsonConstructor]
        public AuthorityFilter(int port, string pattern, StringSelectorOperation operation)
            : base(pattern, operation)
        {
            Port = port;
        }

        public int Port { get; }

        public override FilterScope FilterScope => FilterScope.OnAuthorityReceived;

        public override string? ShortName => "host";

        public override string AutoGeneratedName => $"Hostname `{Pattern}`";

        public override string GenericName => "Filter by host";

        public override bool Common { get; set; } = true;

        protected override IEnumerable<string> GetMatchInputs(IAuthority? authority, IExchange? exchange)
        {
            var hostName = authority?.HostName ?? exchange?.KnownAuthority;

            if (hostName != null)
                yield return hostName;
        }

        protected override bool InternalApply(IAuthority authority, IExchange? exchange, IFilteringContext? filteringContext)
        {
            if ((authority?.Port != Port)) {
                return false; 
            }

            return base.InternalApply(authority, exchange, filteringContext);
        }
    }
}
