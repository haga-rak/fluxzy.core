// Copyright 2021 - Haga Rakotoharivelo - https://github.com/haga-rak

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json.Serialization;
using Fluxzy.Core;
using Fluxzy.Misc;
using Fluxzy.Rules.Filters.RequestFilters;

namespace Fluxzy.Rules.Filters
{
    /// <summary>
    ///     A filter collection is a combination of multiple filter with a merging operator (OR / AND).
    ///     <b>Specific consideration</b> A blank filter collection (no children) will always pass if operator is AND and will
    ///     always fail if operator is OR
    /// </summary>
    [FilterMetaData(
        LongDescription = "FilterCollection is a combination of multiple filters with a merging operator (OR / AND)."
    )]
    public class FilterCollection : Filter
    {
        [JsonConstructor]
        public FilterCollection()
        {
        }

        public FilterCollection(params Filter[] filters)
        {
            Children = filters?.ToList() ?? new List<Filter>();
        }

        public override Guid Identifier {
            get
            {
                if (!Children.Any())
                    return base.Identifier;

                // Slow but let check
                return string.Join(",", Children.OrderBy(t => t.GetType().Name)
                                                .Select(s => s.Identifier.ToString())).GetMd5Guid();
            }
        }

        public List<Filter> Children { get; set; } = new();

        public SelectorCollectionOperation Operation { get; set; }

        public override FilterScope FilterScope => Children.Select(c => c.FilterScope)
                                                           .DefaultIfEmpty(FilterScope.OnAuthorityReceived).Max(c => c);

        public override string AutoGeneratedName => $"Combination of {Children.Count} filter(s)";

        public override string ShortName => ExplicitShortName ?? "multi.";

        public string? ExplicitShortName { get; set; }

        public override string GenericName => "Filter collection";

        protected override bool InternalApply(
            ExchangeContext? exchangeContext, IAuthority authority, IExchange? exchange,
            IFilteringContext? filteringContext)
        {
            foreach (var child in Children) {
                var res = child.Apply(exchangeContext, authority, exchange, filteringContext);

                if (Operation == SelectorCollectionOperation.And && !res)
                    return false;

                if (Operation == SelectorCollectionOperation.Or && res)
                    return true;
            }

            return Operation == SelectorCollectionOperation.And;
        }

        public override IEnumerable<FilterExample> GetExamples()
        {
            yield return new FilterExample(
                "Retains exchanges having POST as method OR request to the host example.com",
                new FilterCollection(new PostFilter(), new HostFilter("example.com", StringSelectorOperation.Exact)));
        }
    }
}
